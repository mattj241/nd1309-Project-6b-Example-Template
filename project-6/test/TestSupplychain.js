// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
const truffleAssert = require('truffle-assertions');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1;
    var upc = 1;
    const ownerID = accounts[0];
    const originFarmerID = accounts[1];
    const originFarmName = "John Doe";
    const originFarmInformation = "Yarray Valley";
    const originFarmLatitude = "-38.239770";
    const originFarmLongitude = "144.341490";
    const productID = sku + upc;
    const productNotes = "Best beans for Espresso";
    const productPrice = web3.utils.toWei('1', 'ether');
    var itemState = 0;
    const distributorID = accounts[2];
    const retailerID = accounts[3];
    const consumerID = accounts[4];
    const emptyAddress = '0x00000000000000000000000000000000000000';

    ///Available Accounts
    ///==================
    // (0) 0x9ced061c6edabc1e84a09a0cd15243ab49becc23
    // (1) 0x4533a37efb64f84b9d4a51087249802d22d30ce0
    // (2) 0xf1926b8038b396895ee2b7dd2a85db76e532ce74
    // (3) 0xb78567810f3c5f762dc1e667e5bb2e0ef51a3efc
    // (4) 0xbc528aab06732e9f974d019a29f5b64b0f261146
    // (5) 0xe566bcc7d81d322eb4134f73971ec37ca54a3435
    // (6) 0xbb1c2e9acdc13d4e817c80cf43da401d0bc2516f
    // (7) 0x4cb2fdb66e13dd4832484dc52d977d582310ef1b
    // (8) 0xc6425d3bf42b56df0aa9bd59b4d1b01a45081820
    // (9) 0xee23b5eecb9037910e901e98a73ac45fa4eed0cb
    

    console.log("ganache-cli accounts used here...");
    console.log("Contract Owner: accounts[0] ", accounts[0]);
    console.log("Farmer: accounts[1] ", accounts[1]);
    console.log("Distributor: accounts[2] ", accounts[2]);
    console.log("Retailer: accounts[3] ", accounts[3]);
    console.log("Consumer: accounts[4] ", accounts[4]);

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        await supplyChain.addFarmer(originFarmerID);

        // Mark an item as Harvested by calling function harvestItem()
        let harvestTx  = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from: originFarmerID});
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State');
        truffleAssert.eventEmitted(harvestTx, 'Harvested');
        await supplyChain.renounceFarmer({from: originFarmerID});
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addFarmer(originFarmerID);
        
        let processTx  = await supplyChain.processItem(upc, {from: originFarmerID});
        truffleAssert.eventEmitted(processTx, 'Processed');
        
        //const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State');
        await supplyChain.renounceFarmer({from: originFarmerID});
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addFarmer(originFarmerID);
        
        const packTx = await supplyChain.packItem(upc, {from: originFarmerID}); 
        truffleAssert.eventEmitted(packTx, 'Packed');

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State');
        await supplyChain.renounceFarmer({from: originFarmerID});
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addFarmer(originFarmerID);
        
        const sellTx = await supplyChain.sellItem(upc, productPrice, {from: originFarmerID}); 
        truffleAssert.eventEmitted(sellTx, 'ForSale');

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Wrong Price!!');
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State');
        await supplyChain.renounceFarmer({from: originFarmerID});
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addDistributor(distributorID);
        
        const buyTx = await supplyChain.buyItem(upc, {from: distributorID, value: productPrice}); 
        truffleAssert.eventEmitted(buyTx, 'Sold');

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        assert.equal(resultBufferOne[2], distributorID, 'Error: Owner ID was expected to match Distributor');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid Distributor ID');
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State');
        await supplyChain.renounceDistributor({from: distributorID});
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addDistributor(distributorID);

        const shipTx = await supplyChain.shipItem(upc, {from: distributorID}); 
        truffleAssert.eventEmitted(shipTx, 'Shipped');

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        assert.equal(resultBufferOne[2], distributorID, 'Error: Owner ID was expected to match Distributor');
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State');
        await supplyChain.renounceDistributor({from: distributorID});
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addRetailer(retailerID);
 
        const receiveTx = await supplyChain.receiveItem(upc, {from: retailerID}); 
        truffleAssert.eventEmitted(receiveTx, 'Received');

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        assert.equal(resultBufferOne[2], retailerID, 'Error: Owner ID was expected to match Retailer');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid Retailer ID');
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State');
        await supplyChain.renounceRetailer({from: retailerID});
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addConsumer(consumerID);
 
        const purchaseTx = await supplyChain.purchaseItem(upc, {from: consumerID}); 
        truffleAssert.eventEmitted(purchaseTx, 'Purchased');

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        assert.equal(resultBufferOne[2], consumerID, 'Error: Owner ID was expected to match Consumer');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid Consumer ID');
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State');
        await supplyChain.renounceConsumer({from: consumerID});
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        
        //last user to touch this UPC was consumer in test #8
        assert.equal(resultBufferOne[0], sku);
        assert.equal(resultBufferOne[1], upc);
        assert.equal(resultBufferOne[2], consumerID);
        assert.equal(resultBufferOne[3], originFarmerID);
        assert.equal(resultBufferOne[4], originFarmName);
        assert.equal(resultBufferOne[5], originFarmInformation);
        assert.equal(resultBufferOne[6], originFarmLatitude);
        assert.equal(resultBufferOne[7], originFarmLongitude);
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferTwo[0], sku);
        assert.equal(resultBufferTwo[1], upc);
        assert.equal(resultBufferTwo[2], productID);
        assert.equal(resultBufferTwo[3], productNotes);
        assert.equal(resultBufferTwo[4], productPrice);
        assert.equal(resultBufferTwo[5], 7);
        assert.equal(resultBufferTwo[6], distributorID);
        assert.equal(resultBufferTwo[7], retailerID);
        assert.equal(resultBufferTwo[8], consumerID);
    })

});

